import { useState, useEffect } from "react";
import {
    View,
    TextInput,
    Text,
    StyleSheet,
    TouchableOpacity,
    Alert
} from "react-native";
import { db, auth } from "../firebase/firebaseConfig";
import { doc, getDoc, setDoc } from "firebase/firestore";

export default function JoinClassForm({ route, navigation }) {
    const { cid } = route.params; // ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤ cid ‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤ AddClass
    const [className, setClassName] = useState("");
    const [group, setGroup] = useState("");
    const [room, setRoom] = useState("");
    const [subject, setSubject] = useState("");
    const [stdid, setStdid] = useState("");
    const [name, setName] = useState("");

    useEffect(() => {
        fetchClassData();
    }, []);

    const fetchClassData = async () => {
        try {
            const classRef = doc(db, `classroom/${cid}`);
            const classSnap = await getDoc(classRef);

            if (classSnap.exists()) {
                const classData = classSnap.data();
                setClassName(classData.className || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™");
                setGroup(classData.group || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°");
                setRoom(classData.room || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á");
                setSubject(classData.subject || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ß‡∏¥‡∏ä‡∏≤");
            } else {
                setClassName("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏•‡∏≤‡∏™");
                setGroup("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                setRoom("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
                setSubject("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            }
        } catch (error) {
            console.error("üî• Error fetching class data:", error.message);
            setClassName("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•");
            setGroup("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
            setRoom("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
            setSubject("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î");
        }
    };

    const handleJoin = async () => {
        const user = auth.currentUser;
        if (!user) {
            Alert.alert("‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô");
            navigation.navigate("Login");
            return;
        }

        if (!stdid.trim() || !name.trim()) {
            Alert.alert("‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô", "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô");
            return;
        }

        try {
            const studentRef = doc(db, `classroom/${cid}/students/${user.uid}`);
            await setDoc(studentRef, {
                stdid,
                name,
                uid: user.uid,
                email: user.email,
            });

            const userClassRef = doc(db, `users/${user.uid}/classroom/${cid}`);
            await setDoc(userClassRef, { status: 2 });

            Alert.alert("‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏•‡∏≤‡∏™‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢!");
            navigation.replace("Home");
        } catch (error) {
            console.error("üî• Error joining class:", error.message);
            Alert.alert("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î", error.message);
        }
    };

    return (
        <View style={styles.container}>
            <Text style={styles.title}>Join Class</Text>
            <Text style={styles.classInfo}>‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏•‡∏≤‡∏™: {className}</Text>
            <Text style={styles.classInfo}>‡∏Å‡∏•‡∏∏‡πà‡∏°: {group}</Text>
            <Text style={styles.classInfo}>‡∏´‡πâ‡∏≠‡∏á: {room}</Text>
            <Text style={styles.classInfo}>‡∏ß‡∏¥‡∏ä‡∏≤: {subject}</Text>
            <Text style={styles.subtitle}>Class ID: {cid}</Text>

            <TextInput
                style={styles.input}
                value={stdid}
                onChangeText={setStdid}
                placeholder="‡∏£‡∏´‡∏±‡∏™‡∏ô‡∏±‡∏Å‡∏®‡∏∂‡∏Å‡∏©‡∏≤"
                autoCapitalize="none"
            />

            <TextInput
                style={styles.input}
                value={name}
                onChangeText={setName}
                placeholder="‡∏ä‡∏∑‡πà‡∏≠ - ‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                autoCapitalize="words"
            />

            <TouchableOpacity style={styles.button} onPress={handleJoin}>
                <Text style={styles.buttonText}>‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°‡∏Ñ‡∏•‡∏≤‡∏™</Text>
            </TouchableOpacity>
        </View>
    );
}

const styles = StyleSheet.create({
    container: {
        flex: 1,
        justifyContent: "center",
        alignItems: "center",
        padding: 20,
        backgroundColor: "#f8f9fa",
    },
    title: {
        fontSize: 24,
        fontWeight: "bold",
        marginBottom: 20,
        color: "#333",
    },
    classInfo: {
        fontSize: 18,
        marginBottom: 5,
        color: "#007bff",
    },
    subtitle: {
        fontSize: 18,
        marginBottom: 10,
        color: "#555",
    },
    input: {
        width: "100%",
        height: 50,
        borderWidth: 1,
        borderColor: "#ccc",
        borderRadius: 8,
        paddingHorizontal: 15,
        backgroundColor: "#fff",
        marginBottom: 15,
    },
    button: {
        width: "100%",
        height: 50,
        backgroundColor: "#28a745",
        justifyContent: "center",
        alignItems: "center",
        borderRadius: 8,
    },
    buttonText: {
        color: "#fff",
        fontSize: 18,
        fontWeight: "bold",
    },
});
